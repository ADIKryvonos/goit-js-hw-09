{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SA8BA,SAASC,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EAEFI,EAAQ,CAAEN,WAAUC,UAGpBM,EAAO,CAAEP,WAAUC,S,GAEpBA,E,IAvCMQ,SAASC,cAAc,SAC/BC,iBAAiB,UAEtB,SAAoBC,GAClBA,EAAEC,iBACF,IAAIC,EAAQC,OAAOH,EAAEI,OAAOf,MAAMgB,OAClCC,QAAQC,IAAI,mDAAsDL,GAC/D,IAAGM,EAAYL,OAAOH,EAAEI,OAAOK,KAAKJ,OACvCC,QAAQC,IAAIC,GACZ,IAAME,EAAcP,OAAOH,EAAEI,OAAOO,OAAON,OAC3CC,QAAQC,IAAIG,GAEZ,IAAK,IAAIE,EAAW,EAAGA,GAAYF,EAAaE,GAAY,EAC1DzB,EAAcyB,EAAUV,GACrBW,MAAK,SAAAC,G,IAAG1B,EAAQ0B,EAAR1B,SAAUC,EAAKyB,EAALzB,MACjB0B,EAAA9B,GAAS+B,OAAOC,QACd,uBAAwCC,OAAf9B,EAAS,QAAY8B,OAAN7B,EAAM,M,IAGjD8B,OAAM,SAAAL,G,IAAG1B,EAAQ0B,EAAR1B,SAAUC,EAAKyB,EAALzB,MAClB0B,EAAA9B,GAAS+B,OAAOI,QACd,sBAAuCF,OAAf9B,EAAS,QAAY8B,OAAN7B,EAAM,M,IAGhDa,GAASM,C","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\nform.addEventListener('submit', formSubmit);\n\nfunction formSubmit(e) {\n  e.preventDefault();\n  let delay = Number(e.target.delay.value);\n  console.log('🚀 ~ file: 03-promises.js:9 ~ formSubmit ~ delay', delay);\n  const stepValue = Number(e.target.step.value);\n  console.log(stepValue);\n  const amountValue = Number(e.target.amount.value);\n  console.log(amountValue);\n\n  for (let position = 1; position <= amountValue; position += 1) {\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      }),\n      (delay += stepValue);\n  }\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        // Fulfill\n        resolve({ position, delay });\n      } else {\n        // Reject\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\n// ----------------\n//   for (let position = 0; position < amountValue; position += 1) {\n//     const element = array[position];\n//     createPromise(position, delay)\n//       .then(({ position, delay }) => {\n//         Notiflix.Notify.failure(\n//           `✅ Fulfilled promise ${position} in ${delay}ms`\n//         );\n//       })\n//       .catch(({ position, delay }) => {\n//         Notiflix.Notify.failure(\n//           `❌ Rejected promise ${position} in ${delay}ms`\n//         );\n//       });\n//   }\n// }\n\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   return new Promise((resolve, reject) => {\n//     setTimeout(() => {\n//       if (shouldResolve) {\n//         resolve();\n//       } else {\n//         reject();\n//       }\n//     }, delay);\n//   });\n// }\n"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","document","querySelector","addEventListener","e","preventDefault","delay1","Number","target","value","console","log","stepValue","step","amountValue","amount","position1","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.d76e2797.js.map"}